FUNCTION_BLOCK FB_PasteurManager
VAR_INPUT
    // ===== Запрос режима (уровень) =====
    RunReq          : BOOL;   // TRUE = цикл активен, FALSE = останов

    // ===== Режим/уставки =====
    RecipeMode      : BOOL;   // Поэтапный (рецептурный) режим
    SP_HeatTemp     : REAL;   // Целевая температура нагрева, °C
    SP_HeatTime     : UDINT;  // Время плавного разгона, мин (резерв)
    SP_SmoothTemp   : REAL;   // (резерв)
    SP_SmoothDiff   : REAL;   // Дифф. рубашки при плавном нагреве, °C (исп. в защите холода)
    SP_HoldTime     : UDINT;  // Длительность выдержки, с
    SP_HoldDiff     : REAL;   // Допустимое отклонение выдержки, °C
    SP_CoolTemp     : REAL;   // Температура охлаждения, °C
    PAR_UsePID      : BOOL;   // 1=PID, 0=гистерезис (здесь для совместимости)

    // ===== Измерения =====
    PV_TempProduct  : REAL;   // Т текущая продукта, °C
    PV_TempJacket   : REAL;   // Т текущая рубашки, °C

    // ===== Команды сервиса (опциональные уровни) =====
    CMD_Stop        : BOOL;   // Немедленный стоп (авария/стоп-кнопка)
    CMD_SkipHeat    : BOOL;   // Пропустить нагрев (опционально)
    CMD_Resume      : BOOL;   // Продолжить из паузы (рецептурный режим)
END_VAR

VAR_OUTPUT
    // Команды в актуатор/температурный менеджер
    CircPump_ON       : BOOL;  // → DO2_CircPump
    Mixer_ON          : BOOL;  // → DO3_MixerFwd
    CoolingValve_ON   : BOOL;  // → DO1_ValveCold
    Pasteur_HeatEnable  : BOOL;  // → FB_TemperatureManager.Pasteur_HeatEnable
    HeatTargetTemp    : REAL;  // → FB_TemperatureManager.SP_TempTarget

    // Диагностика стадий
    StageMask_Pasteur : UDINT; // бит0..бит5: HEAT,HOLD,COOL,EQUALIZE,STORE,DONE
    Stage_Current     : USINT; // Текущий номер стадии
    HoldElapsed_s     : UDINT; // Время выдержки, с
    HoldCompleted     : BOOL;  // TRUE после достижения SP_HoldTime
END_VAR

VAR
    init_done        : BOOL  := FALSE;

    stage            : USINT := 0;   // Текущая стадия
    holdSec          : UDINT := 0;   // накопленное время выдержки, с (вызов ФБ 1 Гц)
    holdDone         : BOOL  := FALSE;
    mixSec           : UDINT := 0;   // время вымешивания/выравнивания, с
    heatEnableState  : BOOL  := FALSE; // внутренний флаг разрешения нагрева

    // «Константы» стадий (не менять в ходе программы)
    STAGE_IDLE       : USINT := 0;
    STAGE_HEAT       : USINT := 1;
    STAGE_HOLD       : USINT := 2;
    STAGE_COOL       : USINT := 3;
    STAGE_EQUALIZE   : USINT := 4;
    STAGE_STORE      : USINT := 5;
    STAGE_DONE       : USINT := 6;
    STAGE_PAUSE      : USINT := 7;   // логически соответствует StageMask биту HOLD
END_VAR

// ---------- Инициализация ----------
IF NOT init_done THEN
    stage := STAGE_IDLE;
    holdSec := 0; holdDone := FALSE;
    mixSec := 0;

    CircPump_ON := FALSE;
    Mixer_ON := FALSE;
    CoolingValve_ON := FALSE;
    Pasteur_HeatEnable := FALSE;
    HeatTargetTemp := SP_HeatTemp;

    StageMask_Pasteur := 0;
    Stage_Current := STAGE_IDLE;
    HoldElapsed_s := 0;
    HoldCompleted := FALSE;

    heatEnableState := FALSE;

    init_done := TRUE;
END_IF;

// ---------- Значения по умолчанию (каждый цикл) ----------
CircPump_ON := FALSE;
Mixer_ON := FALSE;
CoolingValve_ON := FALSE;
HeatTargetTemp := SP_HeatTemp;

StageMask_Pasteur := 0;
HoldElapsed_s := holdSec;
HoldCompleted := holdDone;

heatEnableState := Pasteur_HeatEnable; // сохранить предыдущее состояние нагрева

// ---------- Общий стоп/сброс ----------
IF (NOT RunReq) OR CMD_Stop THEN
    stage := STAGE_IDLE;
    holdSec := 0; holdDone := FALSE;
    mixSec := 0;

    CircPump_ON := FALSE;
    Mixer_ON := FALSE;
    CoolingValve_ON := FALSE;
    heatEnableState := FALSE;

ELSE
    // ---------- Логика стадий ----------
    CASE stage OF

        STAGE_IDLE:
            IF CMD_SkipHeat THEN
                stage := STAGE_HOLD;
                holdSec := 0; holdDone := FALSE;
                heatEnableState := TRUE;
                HeatTargetTemp := SP_HeatTemp;
            ELSE
                stage := STAGE_HEAT;
                heatEnableState := FALSE;
            END_IF;

        STAGE_HEAT:
            StageMask_Pasteur.0 := TRUE;

            CircPump_ON := TRUE;
            Mixer_ON := TRUE;
            HeatTargetTemp := SP_HeatTemp;

            heatEnableState := TRUE;

            IF PV_TempProduct >= SP_HeatTemp THEN
                stage := STAGE_HOLD;
                holdSec := 0; holdDone := FALSE;
            END_IF;

        STAGE_HOLD:
            StageMask_Pasteur.1 := TRUE;

            CircPump_ON := TRUE;
            Mixer_ON := TRUE;
            HeatTargetTemp := SP_HeatTemp;

            IF SP_HoldDiff <= 0.0 THEN
                heatEnableState := TRUE;
            ELSE
                IF PV_TempProduct <= (SP_HeatTemp - SP_HoldDiff) THEN
                    heatEnableState := TRUE;
                ELSIF PV_TempProduct >= SP_HeatTemp THEN
                    heatEnableState := FALSE;
                END_IF;
            END_IF;

            IF NOT holdDone THEN
                holdSec := holdSec + 1;
                IF holdSec >= SP_HoldTime THEN
                    holdDone := TRUE;
                END_IF;
            END_IF;

            IF holdDone THEN
                IF RecipeMode AND (NOT CMD_Resume) THEN
                    stage := STAGE_PAUSE;
                ELSE
                    stage := STAGE_COOL;
                    CoolingValve_ON := TRUE;
                END_IF;
            END_IF;

        STAGE_PAUSE:
            StageMask_Pasteur.1 := TRUE; // визуально «выдержка»

            CircPump_ON := TRUE;
            Mixer_ON := TRUE;
            HeatTargetTemp := SP_HeatTemp;

            IF SP_HoldDiff <= 0.0 THEN
                heatEnableState := TRUE;
            ELSE
                IF PV_TempProduct <= (SP_HeatTemp - SP_HoldDiff) THEN
                    heatEnableState := TRUE;
                ELSIF PV_TempProduct >= SP_HeatTemp THEN
                    heatEnableState := FALSE;
                END_IF;
            END_IF;

            IF CMD_Resume THEN
                stage := STAGE_COOL;
            END_IF;

        STAGE_COOL:
            StageMask_Pasteur.2 := TRUE;

            CircPump_ON := TRUE;
            Mixer_ON := TRUE;
            CoolingValve_ON := TRUE;
            HeatTargetTemp := SP_CoolTemp;

            heatEnableState := FALSE;

            IF PV_TempProduct <= SP_CoolTemp THEN
                CoolingValve_ON := FALSE;
                stage := STAGE_EQUALIZE;
                mixSec := 0;
            ELSE
                IF PV_TempJacket <= (SP_CoolTemp - SP_SmoothDiff) THEN
                    CoolingValve_ON := FALSE;
                END_IF;
            END_IF;

        STAGE_EQUALIZE:
            StageMask_Pasteur.3 := TRUE;

            CircPump_ON := TRUE;
            Mixer_ON := TRUE;
            CoolingValve_ON := FALSE;
            HeatTargetTemp := SP_CoolTemp;

            IF PV_TempProduct < (SP_CoolTemp - 0.3) THEN
                heatEnableState := TRUE;
            ELSE
                heatEnableState := FALSE;
            END_IF;

            IF mixSec < (5 * 60) THEN
                mixSec := mixSec + 1;
            ELSE
                stage := STAGE_DONE;
            END_IF;

        STAGE_STORE:
            StageMask_Pasteur.4 := TRUE;

            CircPump_ON := TRUE;
            Mixer_ON := TRUE;
            HeatTargetTemp := SP_CoolTemp;

            IF PV_TempProduct < (SP_CoolTemp - 1.0) THEN
                heatEnableState := TRUE;
                CoolingValve_ON := FALSE;
            ELSIF PV_TempProduct > (SP_CoolTemp + 1.0) THEN
                heatEnableState := FALSE;
                CoolingValve_ON := TRUE;
            ELSE
                heatEnableState := FALSE;
                CoolingValve_ON := FALSE;
            END_IF;

        STAGE_DONE:
            StageMask_Pasteur.5 := TRUE;

            CircPump_ON := FALSE;
            Mixer_ON := FALSE;
            CoolingValve_ON := FALSE;
            HeatTargetTemp := SP_CoolTemp;

            heatEnableState := FALSE;

        ELSE
            stage := STAGE_IDLE;
    END_CASE;
END_IF;

Stage_Current := stage;
HoldElapsed_s := holdSec;
HoldCompleted := holdDone;
Pasteur_HeatEnable := heatEnableState;

END_FUNCTION_BLOCK
